<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BadEepromLength" xml:space="preserve">
    <value>The EEPROM length received from the controller is incorrect.</value>
  </data>
  <data name="BadEepromResponse" xml:space="preserve">
    <value>The EEPROM response from the controller is unexpected.</value>
  </data>
  <data name="ChecksumIsBad" xml:space="preserve">
    <value>The controller verified the checksum. The checksum is bad.</value>
  </data>
  <data name="ChecksumIsOk" xml:space="preserve">
    <value>The controller verified the checksum. The checksum is okay.</value>
  </data>
  <data name="ConfirmReload" xml:space="preserve">
    <value>Do you want to reload current EEPROM contents now?</value>
  </data>
  <data name="ConfirmReset" xml:space="preserve">
    <value>Set the current EEPROM content to the controller's defaults?

Please note it that the CRT must be powered off and on again by the controller for the defaults to become active, e.g. by a system reboot or sleep mode.</value>
  </data>
  <data name="ConfirmUseReadAsNew" xml:space="preserve">
    <value>The current EEPROM contents were read successfully.

Do you want to use them as the base for your changes?</value>
  </data>
  <data name="ConfirmWriteEeprom" xml:space="preserve">
    <value>The CRT will be configured with your configuration every time it is switched on by the controller. If it is invalid, you will get a blank screen.

Are you sure you want to continue?</value>
  </data>
  <data name="ControllerError" xml:space="preserve">
    <value>An error occurred while communicating with the controller.

Detail:
{0}</value>
  </data>
  <data name="ErrorOpenSerialPort" xml:space="preserve">
    <value>Could not open the serial port: {0}</value>
  </data>
  <data name="FixBadChecksum" xml:space="preserve">
    <value>The checksum is not correct.

Expected: {0:X2}h
Currently: {1:X2}h

If the checksum is not correct, the controller will reset to built-in defaults the next time the CRT is powered on by it.

Do you want to replace the current checksum with the expected checksum?</value>
  </data>
  <data name="IvadDirectIsDangerous" xml:space="preserve">
    <value>Writing directly to the IVAD I²C bus is a dangerous debugging feature. Please think about what you are doing before you continue.

Write {0:X2}h, {1:X2}h to I²C address {2:X2}h now?</value>
  </data>
  <data name="WriteSuccess" xml:space="preserve">
    <value>The EEPROM was rewritten and the controller will attempt to use your configuration the next time it powers on the CRT.</value>
  </data>
</root>