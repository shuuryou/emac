//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ecrtcpl {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ecrtcpl.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The EEPROM length received from the controller is incorrect..
        /// </summary>
        internal static string BadEepromLength {
            get {
                return ResourceManager.GetString("BadEepromLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The EEPROM response from the controller is unexpected..
        /// </summary>
        internal static string BadEepromResponse {
            get {
                return ResourceManager.GetString("BadEepromResponse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The controller verified the checksum. The checksum is bad..
        /// </summary>
        internal static string ChecksumIsBad {
            get {
                return ResourceManager.GetString("ChecksumIsBad", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The controller verified the checksum. The checksum is okay..
        /// </summary>
        internal static string ChecksumIsOk {
            get {
                return ResourceManager.GetString("ChecksumIsOk", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you want to reload current EEPROM contents now?.
        /// </summary>
        internal static string ConfirmReload {
            get {
                return ResourceManager.GetString("ConfirmReload", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set the current EEPROM content to the controller&apos;s defaults?
        ///
        ///Please note it that the CRT must be powered off and on again by the controller for the defaults to become active, e.g. by a system reboot or sleep mode..
        /// </summary>
        internal static string ConfirmReset {
            get {
                return ResourceManager.GetString("ConfirmReset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The current EEPROM contents were read successfully.
        ///
        ///Do you want to use them as the base for your changes?.
        /// </summary>
        internal static string ConfirmUseReadAsNew {
            get {
                return ResourceManager.GetString("ConfirmUseReadAsNew", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CRT will be configured with your configuration every time it is switched on by the controller. If it is invalid, you will get a blank screen.
        ///
        ///Are you sure you want to continue?.
        /// </summary>
        internal static string ConfirmWriteEeprom {
            get {
                return ResourceManager.GetString("ConfirmWriteEeprom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while communicating with the controller.
        ///
        ///Detail:
        ///{0}.
        /// </summary>
        internal static string ControllerError {
            get {
                return ResourceManager.GetString("ControllerError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not open the serial port: {0}.
        /// </summary>
        internal static string ErrorOpenSerialPort {
            get {
                return ResourceManager.GetString("ErrorOpenSerialPort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The checksum is not correct.
        ///
        ///Expected: {0:X2}h
        ///Currently: {1:X2}h
        ///
        ///If the checksum is not correct, the controller will reset to built-in defaults the next time the CRT is powered on by it.
        ///
        ///Do you want to replace the current checksum with the expected checksum?.
        /// </summary>
        internal static string FixBadChecksum {
            get {
                return ResourceManager.GetString("FixBadChecksum", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Writing directly to the IVAD I²C bus is a dangerous debugging feature. Please think about what you are doing before you continue.
        ///
        ///Write {0:X2}h, {1:X2}h to I²C address {2:X2}h now?.
        /// </summary>
        internal static string IvadDirectIsDangerous {
            get {
                return ResourceManager.GetString("IvadDirectIsDangerous", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The EEPROM was rewritten and the controller will attempt to use your configuration the next time it powers on the CRT..
        /// </summary>
        internal static string WriteSuccess {
            get {
                return ResourceManager.GetString("WriteSuccess", resourceCulture);
            }
        }
    }
}
